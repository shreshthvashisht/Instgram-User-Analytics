use ig_clone;
SELECT     
	*
FROM    
	USERS
ORDER BY CREATED_AT
LIMIT 5;
SELECT     
	U.ID, U.USERNAME
FROM    
	USERS U        
	LEFT JOIN    
	PHOTOS P     
	ON P.USER_ID = U.ID 
WHERE P.ID IS NULL;

SELECT
    P.USER_ID,
    U.USERNAME,
    A.*
FROM
PHOTOS P
INNER JOIN 
(SELECT 
    PHOTO_ID,
    COUNT(USER_ID) AS LIKES
FROM
    LIKES 
GROUP BY PHOTO_ID
ORDER BY COUNT(USER_ID) DESC
LIMIT 1) A
ON P.ID=A.PHOTO_ID
INNER JOIN 
USERS U 
ON P.USER_ID=U.ID;

SELECT     
T.TAG_NAME AS TAG_NAME,    COUNT(P.PHOTO_ID) AS NUM_PHOTO_TAG_USED_IN
FROM    PHOTO_TAGS P        INNER JOIN    TAGS T ON T.ID = P.TAG_ID
GROUP BY P.TAG_ID
ORDER BY COUNT(P.PHOTO_ID) DESC
LIMIT 5;

SELECT     
DAYNAME(CREATED_AT) AS DAY,    
COUNT(DAYNAME(CREATED_AT)) AS NUM_USERS_REGISTERED_ON
FROM    USERS
GROUP BY DAYNAME(CREATED_AT)
ORDER BY COUNT(DAYNAME(CREATED_AT)) DESC;

SELECT (SELECT COUNT(ID) FROM PHOTOS)/ (SELECT COUNT(DISTINCT USER_ID) FROM PHOTOS) AS Average_Number_of_posts_per_User,
(SELECT COUNT(ID) FROM PHOTOS)/ (SELECT COUNT(ID) FROM USERS) AS  Ratio_of_Total_Posts_to_Total_Users;

SELECT     
USER_ID,    
USERNAME,    
COUNT(PHOTO_ID) AS NUM_LIKED_PHOTOS,    
P.TOTAL_PHOTOS AS TOTAL_PHOTOS
FROM    LIKES L        INNER JOIN    USERS U ON L.USER_ID = U.ID        
CROSS JOIN    
(SELECT         COUNT(DISTINCT id) AS TOTAL_PHOTOS    FROM        photos) p
GROUP BY USER_ID
HAVING COUNT(PHOTO_ID) = (SELECT         COUNT(ID)    FROM        PHOTOS);
SET SESSION sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY',''));












